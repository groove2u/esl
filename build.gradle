plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'com.google.cloud.tools.jib' version '3.1.2'
    id 'org.hidetake.ssh' version '2.9.0'
    id "io.freefair.lombok" version "6.3.0"
}

group = 'com.haem'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version: '2.4.1'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'mysql:mysql-connector-java'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:1.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

jib {
    from {
        image = "groove2u/${project.name}:${project.version}"
        auth {
            username = 'groove2u'
            password = 'skyblue12#'
        }
    }
    to {
        image = "groove2u/${project.name}:${project.version}"
        auth {
            username = 'groove2u'
            password = 'skyblue12#'
        }
    }
}
test {
    useJUnitPlatform()
}

remotes {
    test {
        role 'test server'
        host = project.properties['dockerHost']
        port = project.properties['dockerPort'].toInteger()
        user = project.properties['dockerUser']
        password = project.properties['dockerPassword']
        knownHosts = allowAnyHosts
    }
}
// 실행방법
// gradlew clean bootJar jibBuildTar dockerTestRun --stacktrace
task dockerTestRun{
    doLast{
        ssh.run {
            session(remotes.test) {
                def command
                def imageName = "groove2u/${project.name}:${project.version}"
                def containerName = 'esl'
                def host = project.properties['dockerHost']
                def buildPath = fileTree(dir: 'build').getDir()
                def tarName = "jib-image.tar"
                def inPort = "8080"
                def outPort = "8080"
                def routePort = "9999"
                def from = "${buildPath}\\${tarName}"
                def to = project.properties["dockerDir"]

                command = 'docker version'
                println "\n\$ ${command}"
                execute(command){r->println r}

                command = "ls ${to}"
                println "\n\$ ${command}"
                execute(command){r->println r}

                command = "rm ${to}${tarName}"
                println "\n\$ ${command}"
                execute(command, ignoreError:true){r->println r}

                println "\n\$ put from:${from}, into: ${to}"
                put from: from, into: to

                command = 'ls'
                println "\n\$ ${command}"
                execute(command){r->println r}

                command = "docker stop ${containerName}"
                println "\n\$ ${command}"
                execute(command, ignoreError:true){r->println r}

                command = "docker rm ${containerName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker rmi ${imageName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker load --input ${to}${tarName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker images"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker run -e VIRTUAL_HOST=esl.tosky.co.kr -d -p ${inPort}:${outPort} --network=esl --name=${containerName} ${imageName} "
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker ps"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                println('\n도커 업로드 완료')
                println("\nhttp://esl.tosky.co.kr 에 접속하세요.")
            }
        }
    }
}